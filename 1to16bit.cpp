#include<bits/stdc++.h>
using namespace std;
#define it long long int
int main()
{
    it num,ttl=0,n0=0,n1=0,n2=0,n3=0,n4=0,n5=0,n6=0,n7=0,n8=0,iv=1,n9=0,n10=0,n11=0,n12=0,n13=0,n14=0,n15=0,n16=0;
    cout<<"Enter the num of error: "<<endl;
    cin>>num;


for(it i0=0;i0<iv;i0++)
{
	for(it i1=0;i1<iv;i1++)
   {
	   for(it i2=0;i2<iv;i2++)
       {
	       for(it i3=0;i3<iv;i3++)
     	   {
	           for(it i4=0;i4<iv;i4++)
               {
	             for(it i5=0;i5<iv;i5++)
                 {
                    for(it i6=0;i6<iv;i6++)
                    {
	                    for(it i7=0;i7<iv;i7++)
                        {
	                         for(it i8=0;i8<iv;i8++)
                             {
	                             for(it i9=0;i9<iv;i9++)
                                 {
	                                  for(it i10=0;i10<iv;i10++)
                                      {
	                                       for(it i11=0;i11<iv;i11++)
     	                                   {
	                                             for(it i12=0;i12<iv;i12++)
                                                 {
	                                                 for(it i13=0;i13<iv;i13++)
                                                     {
                                                          for(it i14=0;i14<iv;i14++)
                                                          {
	                                                         for(it i15=0;i15<iv;i15++)
                                                             {


	it n=16, z=0;
    it ip1[16],ip2[16];




	ip1[0]=1;ip1[1]=0;
	ip1[2]=1;ip1[3]=0;
	ip1[4]=1;ip1[5]=0;
	ip1[6]=1;ip1[7]=0;
	ip1[8]=1;ip1[9]=0;
	ip1[10]=1;ip1[11]=0;
	ip1[12]=1;ip1[13]=0;
	ip1[14]=1;ip1[15]=0;




    //cout<<" 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"<<endl;
    ///cout<<"Give input for errored data bit(16):"<<endl;
    int test=0;
    //int num;
    //cout<<"Enter the num of error: "<<endl;
    //cin>>num;
    while(test<(16-num+1))
    {

		cout<<endl<<"input for actual data bit(16):"<<endl;
	   for(it i=0;i<16;i++)
	  {
		cout<<ip1[i];
	  }


        for(it i=0;i<16;i++)
		{
			if(i>=test&&i<(test+num))
			{
				if(ip1[i]==1)
				{
					ip2[i]=0;
				}
				else
				{
					ip2[i]=1;
				}
			}
			else
			{
				if(ip1[i]==1)
				{
					ip2[i]=1;
				}
				else
				{
					ip2[i]=0;
				}
			}
		}

        cout<<endl;
        cout<<"input for errored data bit(16):"<<endl;
        for(it i=0; i<16; i++)
        {

            cout<<ip2[i];


        }
		ttl++;
		//cout<<endl;


        it H[7][23]= {{1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
            {0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1},
            {0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1},
            {0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,0, 1, 1, 0, 1, 0, 1, 0},
            {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1}
        };

        it H1[8][24]= {{1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1},
            {0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0},
            {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0}
        };

		it H2[9][25] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0}};

		it H4[10][26]= {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1},
		                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0},
	                    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1},
		                {0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0},
		                {0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0},
		      			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
		      			{0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0},
		      			{0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1},
		      			{0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0}};

			it H5[11][27] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
					        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0},
					 		{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1},
					 		{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0},
					 		{0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1},
					 		{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0},
					 		{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1},
					 		{0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0},
					 		{0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,    0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1},
					 		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,    0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0},
					 		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,    1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1}};



	it  H6[12][28] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
					  {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0},
					  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1},
					  {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
					  {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
					  {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0},
					  {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1},
					  {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0},
					  {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1},
					  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
 					  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
					  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0}};


	 it H7[13][29] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0}};



     it  H8[14][30] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0}};


	 it H9[15][31] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0}};


	  it H10[16][32] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,   0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1}};

	it H11[17][33] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,   0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,   0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,    1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0}};

    it H12[18][34] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0}};

    it H13[19][35] ={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}};

    it H14[20][36]={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}};

    it H15[21][37]={{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
					 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}};

		it c[7],s[7],c1[8],s1[8],c2[9],s2[9],c4[10],s4[10],c5[11],s5[11],c6[12],s6[12],c7[13],
        s7[13],c8[14],c9[15],c10[16],c11[17],c12[18],c13[19], s8[14],s9[15],s10[16], s11[17],s12[18],s13[19],c14[20],c15[21],s14[20],s15[21];


        // check bits fuec daec

        c[0]=(ip1[0]+ip1[4]+ip1[7]+ip1[8]+ip1[11]+ip1[12]+ip1[13])%2;


        c[1]=(ip1[1]+ip1[3]+ip1[5]+ip1[7]+ip1[9]+ip1[10]+ip1[11]+ip1[14])%2;



        c[2]=(ip1[0]+ip1[2]+ip1[6]+ip1[7]+ip1[9]+ip1[12]+ip1[14]+ip1[15])%2;


        c[3]=(ip1[1]+ip1[4]+ip1[8]+ip1[9]+ip1[12])%2;


        c[4]=(ip1[0]+ip1[3]+ip1[4]+ip1[7]+ip1[12]+ip1[13]+ip1[15])%2;


        c[5]=(ip1[1]+ip1[2]+ip1[5]+ip1[9]+ip1[10]+ip1[12]+ip1[14])%2;


        c[6]=(ip1[2]+ip1[3]+ip1[6]+ip1[8]+ip1[10]+ip1[11]+ip1[13]+ip1[15])%2;

        //cout<<"check bits:";
        //for(it i=0; i<7; i++)
        //{
            //cout<<c[i]<<" ";
        //}
        //cout<<endl;




        //check bit fuec taec

        c1[0]=(ip1[0]+ip1[3]+ip1[4]+ip1[7]+ip1[8]+ip1[11]+ip1[15])%2;


        c1[1]=(ip1[1]+ip1[4]+ip1[5]+ip1[8]+ip1[9]+ip1[12]+ip1[13])%2;



        c1[2]=(ip1[2]+ip1[5]+ip1[9]+ip1[10]+ip1[12])%2;


        c1[3]=(ip1[6]+ip1[10]+ip1[14]+ip1[15])%2;


        c1[4]=(ip1[0]+ip1[4]+ip1[8]+ip1[9]+ip1[13]+ip1[14]+ip1[15])%2;


        c1[5]=(ip1[1]+ip1[5]+ip1[9]+ip1[11]+ip1[12]+ip1[13]+ip1[14])%2;


        c1[6]=(ip1[2]+ip1[7]+ip1[9]+ip1[10]+ip1[11]+ip1[14])%2;

        c1[7]=(ip1[3]+ip1[6]+ip1[8]+ip1[12]+ip1[14])%2;

		//check bits for quaec;
	    c2[0] =  (ip1[0]+ip1[4]+ip1[5]+ip1[6]+ip1[7])%2;
		c2[1] =  (ip1[1]+ip1[5]+ip1[9]+ip1[10]+ip1[14])%2;
		c2[2] =  (ip1[2]+ip1[6]+ip1[8]+ip1[11]+ip1[15])%2;
		c2[3] =  (ip1[3]+ip1[7]+ip1[11]+ip1[12])%2;
		c2[4] =  (ip1[0]+ip1[5]+ip1[10]+ip1[13]+ip1[15])%2;
		c2[5] =  (ip1[1]+ip1[6]+ip1[10]+ip1[13])%2;
		c2[6] =  (ip1[2]+ip1[7]+ip1[10]+ip1[11]+ip1[15])%2;
		c2[7] =  (ip1[3]+ip1[8]+ip1[12]+ip1[14])%2;
		c2[8] =  (ip1[4]+ip1[9]+ip1[12]+ip1[13])%2;

		//check bits for fuac paec;
		 c4[0]=(ip1[0]+ip1[8]+ip1[11]+ip1[15])%2;
         c4[1]=(ip1[1]+ip1[5]+ip1[9]+ip1[12]+ip1[14])%2;
         c4[2]=(ip1[2]+ip1[6]+ip1[10]+ip1[13]+ip1[15])%2;
         c4[3]=(ip1[3]+ip1[7]+ip1[8]+ip1[11]+ip1[14])%2;
         c4[4]=(ip1[4]+ip1[5]+ip1[8]+ip1[9]+ip1[12]+ip1[15])%2;
         c4[5]=(ip1[0]+ip1[6]+ip1[9]+ip1[10]+ip1[13]+ip1[14])%2;
         c4[6]=(ip1[1]+ip1[7]+ip1[10]+ip1[11]+ip1[15])%2;
         c4[7]=(ip1[2]+ip1[5]+ip1[8]+ip1[11]+ip1[12]+ip1[14])%2;
         c4[8]=(ip1[3]+ip1[6]+ip1[9]+ip1[12]+ip1[13]+ip1[15])%2;
         c4[9]=(ip1[4]+ip1[7]+ip1[10]+ip1[13]+ip1[14])%2;



		 //check bits for hexac
		 /* c5[0]=(ip1[0]+ip1[6]+ip1[9]+ip1[15])%2;
          c5[1]=(ip1[1]+ip1[7]+ip1[10]+ip1[14])%2;
		  c5[2]=(ip1[2]+ip1[8]+ip1[11]+ip1[15])%2;
          c5[3]=(ip1[3]+ip1[9]+ip1[12]+ip1[14])%2;
          c5[4]=(ip1[4]+ip1[6]+ip1[10]+ip1[13]+ip1[15])%2;
		  c5[5]=(ip1[0]+ip1[5]+ip1[7]+ip1[11]+ip1[14])%2;
		  c5[6]=(ip1[1]+ip1[8]+ip1[9]+ip1[11]+ip1[15])%2;
 		  c5[7]=(ip1[2]+ip1[10]+ip1[13]+ip1[14])%2;
 		  c5[8]=(ip1[3]+ip1[6]+ip1[11]+ip1[15])%2;
	 	  c5[9]=(ip1[4]+ip1[7]+ip1[9]+ip1[12]+ip1[14])%2;
	      c5[10]=(ip1[0]+ip1[5]+ip1[8]+ip1[10]+ip1[13]+ip1[15])%2;*/


		 // 6 bit error check bits using loop

		 it cm=0;
		 for(it i=0;i<11;i++)
		 {
		   cm=0;
		 	for(it j=11;j<27;j++)
			{
				if(H5[i][j]==1)
				{
					cm=cm+ip1[j-11];
				}

			}
			c5[i]=cm%2;
		 }

		 // 7 bit error check bits using loop

		 cm=0;
		 for(it i=0;i<12;i++)
		 {
		   cm=0;
		 	for(it j=12;j<28;j++)
			{
				if(H6[i][j]==1)
				{
					cm=cm+ip1[j-12];
				}

			}
			c6[i]=cm%2;
		 }

		 // 8 bit error check bits using loop

		 cm=0;
		 for(it i=0;i<13;i++)
		 {
		   cm=0;
		 	for(it j=13;j<29;j++)
			{
				if(H7[i][j]==1)
				{
					cm=cm+ip1[j-13];
				}

			}
			c7[i]=cm%2;
		 }


        // 9 bit error check bits using loop
        cm=0;
         for(it i=0;i<14;i++)
		 {
		   cm=0;
		 	for(it j=14;j<30;j++)
			{
				if(H8[i][j]==1)
				{
					cm=cm+ip1[j-14];
				}

			}
			c8[i]=cm%2;
		 }


        // 10 bit error check bits using loop
        cm=0;
         for(it i=0;i<15;i++)
		 {
		   cm=0;
		 	for(it j=15;j<31;j++)
			{
				if(H9[i][j]==1)
				{
					cm=cm+ip1[j-15];
				}

			}
			c9[i]=cm%2;

		 }

        // 11 bit error check bits using loop
        cm=0;
         for(it i=0;i<16;i++)
		 {
		   cm=0;
		 	for(it j=16;j<32;j++)
			{
				if(H10[i][j]==1)
				{
					cm=cm+ip1[j-16];
				}

			}
			c10[i]=cm%2;
		 }

     // 12 bit error check bits using loop
        cm=0;
         for(it i=0;i<17;i++)
		 {
		   cm=0;
		 	for(it j=17;j<33;j++)
			{
				if(H11[i][j]==1)
				{
					cm=cm+ip1[j-17];
				}

			}
			c11[i]=cm%2;
		 }

        // 13 bit error check bits using loop
        cm=0;
         for(it i=0;i<18;i++)
		 {
		   cm=0;
		 	for(it j=18;j<34;j++)
			{
				if(H12[i][j]==1)
				{
					cm=cm+ip1[j-18];
				}

			}
			c12[i]=cm%2;
		 }

         // 14 bit error check bits using loop
        cm=0;
         for(it i=0;i<19;i++)
		 {
		   cm=0;
		 	for(it j=19;j<35;j++)
			{
				if(H13[i][j]==1)
				{
					cm=cm+ip1[j-19];
				}

			}
			c13[i]=cm%2;
		 }
        // 15 bit error check bits using loop
        cm=0;
         for(it i=0;i<20;i++)
		 {
		   cm=0;
		 	for(it j=20;j<36;j++)
			{
				if(H14[i][j]==1)
				{
					cm=cm+ip1[j-20];
				}

			}
			c14[i]=cm%2;
		 }

        // 16 bit error check bits using loop
        cm=0;
         for(it i=0;i<21;i++)
		 {
		   cm=0;
		 	for(it j=21;j<37;j++)
			{
				if(H15[i][j]==1)
				{
					cm=cm+ip1[j-21];
				}

			}
			c15[i]=cm%2;
		 }


        //syndrom calculation daec
        s[0]=(c[0]+ip2[0]+ip2[4]+ip2[7]+ip2[8]+ip2[11]+ip2[12]+ip2[13])%2;


        s[1]=(c[1]+ip2[1]+ip2[3]+ip2[5]+ip2[7]+ip2[9]+ip2[10]+ip2[11]+ip2[14])%2;



        s[2]=(c[2]+ip2[0]+ip2[2]+ip2[6]+ip2[7]+ip2[9]+ip2[12]+ip2[14]+ip2[15])%2;


        s[3]=(c[3]+ip2[1]+ip2[4]+ip2[8]+ip2[9]+ip2[12])%2;


        s[4]=(c[4]+ip2[0]+ip2[3]+ip2[4]+ip2[7]+ip2[12]+ip2[13]+ip2[15])%2;


        s[5]=(c[5]+ip2[1]+ip2[2]+ip2[5]+ip2[9]+ip2[10]+ip2[12]+ip2[14])%2;


        s[6]=(c[6]+ip2[2]+ip2[3]+ip2[6]+ip2[8]+ip2[10]+ip2[11]+ip2[13]+ip2[15])%2;

        // syndrom calculation taec

        s1[0]=(c1[0]+ip2[0]+ip2[3]+ip2[4]+ip2[7]+ip2[8]+ip2[11]+ip2[15])%2;


        s1[1]=(c1[1]+ip2[1]+ip2[4]+ip2[5]+ip2[8]+ip2[9]+ip2[12]+ip2[13])%2;



        s1[2]=(c1[2]+ip2[2]+ip2[5]+ip2[9]+ip2[10]+ip2[12])%2;


        s1[3]=(c1[3]+ip2[6]+ip2[10]+ip2[14]+ip2[15])%2;


        s1[4]=(c1[4]+ip2[0]+ip2[4]+ip2[8]+ip2[9]+ip2[13]+ip2[14]+ip2[15])%2;


        s1[5]=(c1[5]+ip2[1]+ip2[5]+ip2[9]+ip2[11]+ip2[12]+ip2[13]+ip2[14])%2;


        s1[6]=(c1[6]+ip2[2]+ip2[7]+ip2[9]+ip2[10]+ip2[11]+ip2[14])%2;

        s1[7]=(c1[7]+ip2[3]+ip2[6]+ip2[8]+ip2[12]+ip2[14])%2;

	    //syndrom for for bits error

		s2[0] =  (c2[0]+ip2[0]+ip2[4]+ip2[5]+ip2[6]+ip2[7])%2;
		s2[1] =  (c2[1]+ip2[1]+ip2[5]+ip2[9]+ip2[10]+ip2[14])%2;
		s2[2] =  (c2[2]+ip2[2]+ip2[6]+ip2[8]+ip2[11]+ip2[15])%2;
		s2[3] =  (c2[3]+ip2[3]+ip2[7]+ip2[11]+ip2[12])%2;
		s2[4] =  (c2[4]+ip2[0]+ip2[5]+ip2[10]+ip2[13]+ip2[15])%2;
		s2[5] =  (c2[5]+ip2[1]+ip2[6]+ip2[10]+ip2[13])%2;
		s2[6] =  (c2[6]+ip2[2]+ip2[7]+ip2[10]+ip2[11]+ip2[15])%2;
		s2[7] =  (c2[7]+ip2[3]+ip2[8]+ip2[12]+ip2[14])%2;
		s2[8] =  (c2[8]+ip2[4]+ip2[9]+ip2[12]+ip2[13])%2;


       //syndrom for 5 bits error
         s4[0]=(c4[0]+ip2[0]+ip2[8]+ip2[11]+ip2[15])%2;
         s4[1]=(c4[1]+ip2[1]+ip2[5]+ip2[9]+ip2[12]+ip2[14])%2;
         s4[2]=(c4[2]+ip2[2]+ip2[6]+ip2[10]+ip2[13]+ip2[15])%2;
         s4[3]=(c4[3]+ip2[3]+ip2[7]+ip2[8]+ip2[11]+ip2[14])%2;
         s4[4]=(c4[4]+ip2[4]+ip2[5]+ip2[8]+ip2[9]+ip2[12]+ip2[15])%2;
         s4[5]=(c4[5]+ip2[0]+ip2[6]+ip2[9]+ip2[10]+ip2[13]+ip2[14])%2;
         s4[6]=(c4[6]+ip2[1]+ip2[7]+ip2[10]+ip2[11]+ip2[15])%2;
         s4[7]=(c4[7]+ip2[2]+ip2[5]+ip2[8]+ip2[11]+ip2[12]+ip2[14])%2;
         s4[8]=(c4[8]+ip2[3]+ip2[6]+ip2[9]+ip2[12]+ip2[13]+ip2[15])%2;
         s4[9]=(c4[9]+ip2[4]+ip2[7]+ip2[10]+ip2[13]+ip2[14])%2;
            cout<<endl;
         for(it i=0;i<10;i++)
         {
             cout<<s4[i]<<" ";
         }
         cout<<endl;


		 // syndrom for 6 bit error


		           /*  s5[0]=(c5[0]+ip2[0]+ip2[6]+ip2[9]+ip2[15])%2;
                     s5[1]=(c5[1]+ip2[1]+ip2[7]+ip2[10]+ip2[14])%2;
                     s5[2]=(c5[2]+ip2[2]+ip2[8]+ip2[11]+ip2[15])%2;
                     s5[3]=(c5[3]+ip2[3]+ip2[9]+ip2[12]+ip2[14])%2;
                     s5[4]=(c5[4]+ip2[4]+ip2[6]+ip2[10]+ip2[13]+ip2[15])%2;
					 s5[5]=(c5[5]+ip2[0]+ip2[5]+ip2[7]+ip2[11]+ip2[14])%2;
					 s5[6]=(c5[6]+ip2[1]+ip2[8]+ip2[9]+ip2[11]+ip2[15])%2;
					 s5[7]=(c5[7]+ip2[2]+ip2[10]+ip2[13]+ip2[14])%2;
					 s5[8]=(c5[8]+ip2[3]+ip2[6]+ip2[11]+ip2[15])%2;
					 s5[9]=(c5[9]+ip2[4]+ip2[7]+ip2[9]+ip2[12]+ip2[14])%2;
					 s5[10]=(c5[10]+ip2[0]+ip2[5]+ip2[8]+ip2[10]+ip2[13]+ip2[15])%2;*/

		//6 bit syndrom using loop
		 for(it i=0;i<11;i++)
		 {
		   cm=0;
		 	for(it j=11;j<27;j++)
			{
				if(H5[i][j]==1)
			{
					cm=cm+ip2[j-11];
			}

			}
			s5[i]=(c5[i]+cm)%2;
		 }

		 //7 bit syndrom using loop


		 for(it i=0;i<12;i++)
		 {
		   cm=0;
		 	for(it j=12;j<28;j++)
			{
				if(H6[i][j]==1)
			{
					cm=cm+ip2[j-12];
			}

			}
			s6[i]=(c6[i]+cm)%2;
		 }


		 //8 bit syndrom using loop


		 for(it i=0;i<13;i++)
		 {
		   cm=0;
		 	for(it j=13;j<29;j++)
			{
				if(H7[i][j]==1)
			{
					cm=cm+ip2[j-13];
			}

			}
			s7[i]=(c7[i]+cm)%2;
		 }

        //9 bit syndrom using loop
    	 for(it i=0;i<14;i++)
		 {
		   cm=0;
		 	for(it j=14;j<30;j++)
			{
				if(H8[i][j]==1)
			{
					cm=cm+ip2[j-14];
			}

			}
			s8[i]=(c8[i]+cm)%2;
		 }

        //10 bit syndrom using loop
    	 for(it i=0;i<15;i++)
		 {
		    cm=0;
		 	for(it j=15;j<31;j++)
			{
				if(H9[i][j]==1)
			{
					cm=cm+ip2[j-15];
			}

			}
			s9[i]=(c9[i]+cm)%2;

		 }



         //11 bit syndrom using loop
    	 for(it i=0;i<16;i++)
		 {
		    cm=0;
		 	for(it j=16;j<32;j++)
			{
				if(H10[i][j]==1)
			{
					cm=cm+ip2[j-16];
			}

			}
			s10[i]=(c10[i]+cm)%2;
		 }

         // 12 bit error syndrom using loop
        cm=0;
         for(it i=0;i<17;i++)
		 {
		   cm=0;
		 	for(it j=17;j<33;j++)
			{
				if(H11[i][j]==1)
				{
					cm=cm+ip2[j-17];
				}

			}
			s11[i]=(c11[i]+cm)%2;
		 }

        // 13 bit error check bits using loop
        cm=0;
         for(it i=0;i<18;i++)
		 {
		   cm=0;
		 	for(it j=18;j<34;j++)
			{
				if(H12[i][j]==1)
				{
					cm=cm+ip2[j-18];
				}

			}
			s12[i]=(c12[i]+cm)%2;
		 }

         // 14 bit error syndrom bits using loop
        cm=0;
         for(it i=0;i<19;i++)
		 {
		   cm=0;
		 	for(it j=19;j<35;j++)
			{
				if(H13[i][j]==1)
				{
					cm=cm+ip2[j-19];
				}

			}
			s13[i]=(c13[i]+cm)%2;
		 }
                 // 15 bit error check bits using loop
        cm=0;
         for(it i=0;i<20;i++)
		 {
		   cm=0;
		 	for(it j=20;j<36;j++)
			{
				if(H14[i][j]==1)
				{
					cm=cm+ip2[j-20];
				}

			}
			s14[i]=(c14[i]+cm)%2;
		 }

        // 16 bit error check bits using loop
        cm=0;
         for(it i=0;i<21;i++)
		 {
		   cm=0;
		 	for(it j=21;j<37;j++)
			{
				if(H15[i][j]==1)
				{
					cm=cm+ip2[j-21];
				}

			}
			s15[i]=(c15[i]+cm)%2;
		 }




		 //for(it i=0;i<13;i++)
		 //{
		 //	cout<<s7[i]<<endl;
		 //}


        //cout<<"syndrome:";
        it scount=0,scount1=0;
        for(it i=0; i<7; i++)
        {
            //cout<<s1[i]<<" ";
            scount=scount+s[i];

        }
        cout<<endl;


        it pos = 1000,flag=0,tmp[7],tmpcount=0,tmp1[8],tmp2[9],tmp4[10],tmp5[11],tmp6[12],tmp7[13],tmp8[14],tmp9[15],tmp10[16],tmp11[17],tmp12[18],tmp13[19],tmp14[20],tmp15[21];
        for(it j=7; j<23; j++)
        {
            flag=0;
            for(it i=0; i<7; i++)
            {
                if(H[i][j]==s[i])
                {
                    flag++;
                }
                else
                {
                    flag=0;
                    break;
                }
                if(flag == 7)
                {
                    pos=j;
                    break;
                }


            }
        }
        //cout<<flag<<endl;

        if(scount==0 && pos==1000 && num ==0 )
        {
            cout<<"NO error found"<<endl;
			n0++;
            flag=1;
        }
        else if(scount!=0 && pos!=1000 && num ==1)
        {
            //single bit error detect
            n1++;
            cout<<"error found in "<<pos-6<<"th bit"<<endl;
			flag=1;
            ip2[pos-7]=(ip2[pos-7]+1)%2;
            cout<<"corrected output: ";
            for(it i=0; i<16; i++)
            {
                cout<<ip2[i]<<" ";
            }
            cout<<endl;
        }
        else if(scount!=0 && pos==1000)
        {
            //2bit error detect
            z=1;
            flag=0;
            for(it j=7; j<22; j++)
            {
                for(it i=0; i<7; i++)
                {
                    tmp[i]=((H[i][j]+H[i][j+1])%2);

                }

                tmpcount=0;
                for(it i=0; i<7; i++)
                {
                    if(tmp[i]==s[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==7&&num==2)
                    {
                        pos=j;
                        flag=1;
						n2++;
                        cout<<"Double error found at bit position  "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        flag=1;
                        cout<<endl;
                        break;
                    }
                }
            }



        }
        if(flag==0)
        {

            //cout<<"3 bit burst error has occurred "<<endl;

            for(it j=8; j<22; j++)
            {
                for(it i=0; i<8; i++)
                {
                    tmp1[i]=((H1[i][j]+H1[i][j+1]+H1[i][j+2])%2);
                }
                tmpcount=0;
                for(it i=0; i<8; i++)
                {
                    if(tmp1[i]==s1[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==8&&num==3)
                    {
                        pos=j;
                        flag=1;
						n3++;
                        cout<<"3bit error found at bit position  "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
                    }
                }
            }

            if(flag==0)
            {
                //cout<<" burst error detected"<<endl;

				for(it j=9;j<22;j++)
				{
					for(it i=0;i<9;i++)
					{
						tmp2[i]=(H2[i][j]+H2[i][j+1]+H2[i][j+2]+H2[i][j+3])%2;
					}
					tmpcount=0;
                for(it i=0; i<9; i++)
                {
                    if(tmp2[i]==s2[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==9&&num==4)
                    {
                        pos=j;
                        flag=1;
						n4++;
                        cout<<"4bit error found at bit position  "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
            }


				}

				///start






				//end
            }
			if(flag==0)
            {
                //cout<<" burst error detected"<<endl;

				for(it j=10;j<22;j++)
				{
					for(it i=0;i<10;i++)
					{
						tmp4[i]=(H4[i][j]+H4[i][j+1]+H4[i][j+2]+H4[i][j+3]+H4[i][j+4])%2;
						//cout<<tmp4[i];

					}
					//cout<<endl;
					tmpcount=0;
                for(it i=0; i<10; i++)
                {
                    if(tmp4[i]==s4[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==10&&num==5)
                    {
                        pos=j;
                        flag=1;
						n5++;
                    for(it i=0;i<10;i++)
					{
						//tmp4[i]=(H4[i][j]+H4[i][j+1]+H4[i][j+2]+H4[i][j+3]+H4[i][j+4])%2;
						cout<<tmp4[i];

					}
					cout<<endl;
                        cout<<"5bit error found at bit position  "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
            }


				}

            }

			if(flag==0)
            {


				for(it j=11;j<22;j++)
				{
					for(it i=0;i<11;i++)
					{
						tmp5[i]=(H5[i][j]+H5[i][j+1]+H5[i][j+2]+H5[i][j+3]+H5[i][j+4]+H5[i][j+5])%2;
					}
					tmpcount=0;
                for(it i=0; i<11; i++)
                {
                    if(tmp5[i]==s5[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==11&&num==6)
                    {
                        pos=j;
                        flag=1;
						n6++;
                        cout<<"6bit error found at bit position  "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
            }


				}

            }

			if(flag==0)
            {


				for(it j=12;j<22;j++)
				{
					for(it i=0;i<12;i++)
					{
						tmp6[i]=(H6[i][j]+H6[i][j+1]+H6[i][j+2]+H6[i][j+3]+H6[i][j+4]+H6[i][j+5]+H6[i][j+6])%2;
					}
					tmpcount=0;
                for(it i=0; i<12; i++)
                {
                    if(tmp6[i]==s6[i])
                    {
                        tmpcount++;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==12&&num==7)
                    {
                        pos=j;
                        flag=1;
						n7++;
                        cout<<"7bit error found at bit position  "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
            }


				}

            }


			if(flag==0)
            {


				for(it j=13;j<22;j++)
				{
					for(it i=0;i<13;i++)
					{
						tmp7[i]=(H7[i][j]+H7[i][j+1]+H7[i][j+2]+H7[i][j+3]+H7[i][j+4]+H7[i][j+5]+H7[i][j+6]+H7[i][j+7])%2;
					}
					tmpcount=0;
                for(it i=0; i<13; i++)
                {
                    if(tmp7[i]==s7[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==13&&num==8)
                    {
                        pos=j;
                        flag=1;
						n8++;
                        cout<<"8bit error found at bit position  "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
            }


				}

            }
            if(flag==0)
            {


				for(it j=14;j<22;j++)
				{
					for(it i=0;i<14;i++)
					{
						tmp8[i]=(H8[i][j]+H8[i][j+1]+H8[i][j+2]+H8[i][j+3]+H8[i][j+4]+H8[i][j+5]+H8[i][j+6]+H8[i][j+7]+H8[i][j+8])%2;
					}
					tmpcount=0;
                for(it i=0; i<14; i++)
                {
                    if(tmp8[i]==s8[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==14&&num==9)
                    {
                        pos=j;
                        flag=1;
						n9++;
                        cout<<"9bit error found at bit position  "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

                        if(flag==0)
            {


				for(it j=15;j<22;j++)
				{
					for(it i=0;i<15;i++)
					{
						tmp9[i]=(H9[i][j]+H9[i][j+1]+H9[i][j+2]+H9[i][j+3]+H9[i][j+4]+H9[i][j+5]+H9[i][j+6]+H9[i][j+7]+H9[i][j+8]+H9[i][j+9])%2;
					}
					tmpcount=0;
                for(it i=0; i<15; i++)
                {
                    if(tmp9[i]==s9[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==15 && num==10)
                    {
                        pos=j;
                        flag=1;
						n10++;
                        cout<<"10bit error found at bit position  "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

            if(flag==0)
            {


				for(it j=16;j<22;j++)
				{
					for(it i=0;i<16;i++)
					{
						tmp10[i]=(H10[i][j]+H10[i][j+1]+H10[i][j+2]+H10[i][j+3]+H10[i][j+4]+H10[i][j+5]+H10[i][j+6]+H10[i][j+7]+H10[i][j+8]+H10[i][j+9]+H10[i][j+10])%2;
					}
					tmpcount=0;
                for(it i=0; i<16; i++)
                {
                    if(tmp10[i]==s10[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==16&&num==11)
                    {
                        pos=j;
                        flag=1;
						n11++;
                        cout<<"11bit error found at bit position  "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<16; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

            if(flag==0)
            {


				for(it j=17;j<22;j++)
				{
					for(it i=0;i<17;i++)
					{
						tmp11[i]=(H11[i][j]+H11[i][j+1]+H11[i][j+2]+H11[i][j+3]+H11[i][j+4]+H11[i][j+5]+H11[i][j+6]+H11[i][j+7]+H11[i][j+8]+H11[i][j+9]+H11[i][j+10]+H11[i][j+11])%2;
                          //tmp11[i]=0;

					}
					tmpcount=0;
                for(it i=0; i<17; i++)
                {
                    if(tmp11[i]==s11[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==17&&num==12)
                    {
                        pos=j;
                        cout<<"asdasd"<<endl;
                        flag=1;
						n12++;
                        cout<<"12bit error found at bit position  "<<pos-16<<" & "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-17]=(ip2[pos-17]+1)%2;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<17; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

             if(flag==0)
            {


				for(it j=18;j<22;j++)
				{
					for(it i=0;i<18;i++)
					{
						tmp12[i]=(H12[i][j]+H12[i][j+1]+H12[i][j+2]+H12[i][j+3]+H12[i][j+4]+H12[i][j+5]+H12[i][j+6]+H12[i][j+7]+H12[i][j+8]+H12[i][j+9]+H12[i][j+10]+H12[i][j+11]+H12[i][j+12])%2;
                          //tmp11[i]=0;

					}
					tmpcount=0;
                for(it i=0; i<18; i++)
                {
                    if(tmp12[i]==s12[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==18&&num==13)
                    {
                        pos=j;
                        cout<<"asdasd"<<endl;
                        flag=1;
						n13++;
                        cout<<"13bit error found at bit position  "<<pos-17<<" & "<<pos-16<<" & "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-18]=(ip2[pos-18]+1)%2;
                        ip2[pos-17]=(ip2[pos-17]+1)%2;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<18; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

            if(flag==0)
            {


				for(it j=19;j<22;j++)
				{
					for(it i=0;i<19;i++)
					{
						tmp13[i]=(H13[i][j]+H13[i][j+1]+H13[i][j+2]+H13[i][j+3]+H13[i][j+4]+H13[i][j+5]+H13[i][j+6]+H13[i][j+7]+H13[i][j+8]+H13[i][j+9]+H13[i][j+10]+H13[i][j+11]+H13[i][j+12]+H13[i][j+13])%2;

					}
					tmpcount=0;
                for(it i=0; i<19; i++)
                {
                    if(tmp13[i]==s13[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==19&&num==14)
                    {
                        pos=j;
                        cout<<"asdasd"<<endl;
                        flag=1;
						n14++;
                        cout<<"14bit error found at bit position  "<<pos-18<<" & "<<pos-17<<" & "<<pos-16<<" & "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-19]=(ip2[pos-19]+1)%2;
                        ip2[pos-18]=(ip2[pos-18]+1)%2;
                        ip2[pos-17]=(ip2[pos-17]+1)%2;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<19; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }

            if(flag==0)
            {


				for(it j=20;j<22;j++)
				{
					for(it i=0;i<20;i++)
					{
						tmp14[i]=(H14[i][j]+H14[i][j+1]+H14[i][j+2]+H14[i][j+3]+H14[i][j+4]+H14[i][j+5]+H14[i][j+6]+H14[i][j+7]+H14[i][j+8]+H14[i][j+9]+H14[i][j+10]+H14[i][j+11]+H14[i][j+12]+H14[i][j+13]+H14[i][j+14])%2;
					}
					tmpcount=0;
                for(it i=0; i<20; i++)
                {
                    if(tmp14[i]==s14[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==20&&num==15)
                    {
                        pos=j;
                        cout<<"asdasd"<<endl;
                        flag=1;
						n15++;
                        cout<<"15bit error found at bit position  "<<pos-19<<" & "<<pos-18<<" & "<<pos-17<<" & "<<pos-16<<" & "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-20]=(ip2[pos-20]+1)%2;
                        ip2[pos-19]=(ip2[pos-19]+1)%2;
                        ip2[pos-18]=(ip2[pos-18]+1)%2;
                        ip2[pos-17]=(ip2[pos-17]+1)%2;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<20; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }
            if(flag==0)
            {


				for(it j=21;j<22;j++)
				{
					for(it i=0;i<21;i++)
					{
						tmp15[i]=(H15[i][j]+H15[i][j+1]+H15[i][j+2]+H15[i][j+3]+H15[i][j+4]+H15[i][j+5]+H15[i][j+6]+H15[i][j+7]
                        +H15[i][j+8]+H15[i][j+9]+H15[i][j+10]+H15[i][j+11]+H15[i][j+12]+H15[i][j+13]+H15[i][j+14]+H15[i][j+15])%2;

					}
					tmpcount=0;
                for(it i=0; i<21; i++)
                {
                    if(tmp15[i]==s15[i])
                    {
                        tmpcount++;
						//cout<<"asa"<<endl;
                    }
                    else
                    {
                        tmpcount=0;
                        break;
                    }
                    if(tmpcount==21&&num==16)
                    {
                        pos=j;
                        cout<<"asdasd"<<endl;
                        flag=1;
						n16++;
                        cout<<"16bit error found at bit position  "<<pos-20<<" & "<<pos-19<<" & "<<pos-18<<" & "<<pos-17<<" & "<<pos-16<<" & "<<pos-15<<" & "<<pos-14<<" & "<<pos-13<<" & "<<pos-12<<" & "<<pos-11<<" & "<<pos-10<<" & "<<pos-9<<" & "<<pos-8<<" & "<<pos-7<<" & "<<pos-6<<" & "<<pos-5<<endl;
                        ip2[pos-20]=(ip2[pos-20]+1)%2;
                        ip2[pos-21]=(ip2[pos-21]+1)%2;
                        ip2[pos-19]=(ip2[pos-19]+1)%2;
                        ip2[pos-18]=(ip2[pos-18]+1)%2;
                        ip2[pos-17]=(ip2[pos-17]+1)%2;
                        ip2[pos-16]=(ip2[pos-16]+1)%2;
                        ip2[pos-15]=(ip2[pos-15]+1)%2;
                        ip2[pos-14]=(ip2[pos-14]+1)%2;
                        ip2[pos-13]=(ip2[pos-13]+1)%2;
					    ip2[pos-12]=(ip2[pos-12]+1)%2;
						ip2[pos-11]=(ip2[pos-11]+1)%2;
						ip2[pos-10]=(ip2[pos-10]+1)%2;
						ip2[pos-9]=(ip2[pos-9]+1)%2;
						ip2[pos-8]=(ip2[pos-8]+1)%2;
                        ip2[pos-7]=(ip2[pos-7]+1)%2;
                        ip2[pos-6]=(ip2[pos-6]+1)%2;
                        cout<<"corrected output: ";
                        for(it k=0; k<21; k++)
                        {
                            cout<<ip2[k]<<" ";
                        }
                        cout<<endl;
                        break;
					}
                }


				}

            }



        }
		test++;
		if(num==0)
		break;


    }

                                                             }
                                                           }
                                                      }
                                                   }
		                                      }
                                         }
                                    }
                               }
                           }
                       }
                  }
               }
		   }
       }
   }
}
double dd=0;
if(num==0)
{
	dd=((n0*100)/ttl);
}
else if(num==1)
{
	dd=((n1*100)/ttl);
}
else if(num==2)
{
	dd=((n2*100)/ttl);
}
else if(num==3)
{
	dd=((n3*100)/ttl);
}
else if(num==4)
{
	dd=((n4*100)/ttl);
}
else if(num==5)
{
	dd=((n5*100)/ttl);
}
else if(num==6)
{
	dd=((n6*100)/ttl);
}
else if(num==7)
{
	dd=((n7*100)/ttl);
}
else if(num==8)
{
	dd=((n8*100)/ttl);
}
else if(num==9)
{
	dd=((n9*100)/ttl);
}
else if(num==10)
{
	dd=((n10*100)/ttl);
}
else if(num==11)
{
	dd=((n11*100)/ttl);
}
else if(num==12)
{
	dd=((n12*100)/ttl);
}
else if(num==13)
{
	dd=((n13*100)/ttl);
}
else if(num==14)
{
	dd=((n14*100)/ttl);
}
else if(num==15)
{
	dd=((n15*100)/ttl);
}
else if(num==16)
{
	dd=((n16*100)/ttl);
}
cout<<"total tests:"<<ttl<<endl;
cout<<"accuracy: "<<dd<<"%"<<endl;

}
